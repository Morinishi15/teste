{"ast":null,"code":"var _jsxFileName = \"/home/matheus/\\xC1rea de Trabalho/PomodOrc2021-2/src/components/Clock/Clock.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { func } from 'prop-types';\nimport useWindowSize from 'hooks/useWindowSize';\nimport cyclesContext from 'contexts/cycles.context';\nimport { formatRemainingTimeInMinutes, formatRemainingTimeInSeconds } from 'utils/helpers';\nimport * as S from './Clock.style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Clock({\n  setPomodoroCycleType\n}) {\n  _s();\n\n  const {\n    width\n  } = useWindowSize();\n  const orderedCycles = useContext(cyclesContext);\n  const [remainingTime, setRemainingTime] = useState(orderedCycles[0].duration);\n  const [remainingMinutes, setRemainingMinutes] = useState(0);\n  const [remainingSeconds, setRemainingSeconds] = useState(0);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  const [pomodoroCycles, setPomodoroCycles] = useState(0);\n  const [gaugePercentual, setGaugePercentual] = useState(0);\n\n  const stopClock = () => setIsTimeRunning(false);\n\n  const playClock = () => setIsTimeRunning(true);\n\n  const restartClock = () => {\n    updateCycleInformation(0);\n    stopClock();\n    setPomodoroCycles(0);\n  };\n\n  const updateCycleInformation = pomodoroCycle => {\n    setRemainingTime(orderedCycles[pomodoroCycle].duration);\n    setPomodoroCycleType(orderedCycles[pomodoroCycle].type);\n  };\n\n  const handleClick = () => {\n    setIsTimeRunning(!isTimeRunning);\n  };\n\n  React.useEffect(() => {\n    if (isTimeRunning) {\n      const interval = setInterval(() => {\n        setRemainingTime(prev => {\n          if (prev === 0) return prev;\n          return prev - 1;\n        });\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [isTimeRunning]);\n  useEffect(() => {\n    setRemainingMinutes(formatRemainingTimeInMinutes(remainingTime));\n    setRemainingSeconds(formatRemainingTimeInSeconds(remainingTime));\n    setGaugePercentual((100 - remainingTime * 100 / orderedCycles[pomodoroCycles].duration) / 100);\n    const hasCycleEnded = remainingTime === 0;\n\n    if (hasCycleEnded) {\n      stopClock();\n      setPomodoroCycles(previousState => previousState + 1);\n    }\n  }, [remainingTime]);\n  useEffect(() => {\n    const isFirstCycle = pomodoroCycles < 1;\n    const shouldRestart = pomodoroCycles > 5;\n\n    if (!isFirstCycle) {\n      if (shouldRestart) {\n        restartClock();\n        return;\n      }\n\n      updateCycleInformation(pomodoroCycles);\n      playClock();\n    }\n  }, [pomodoroCycles]);\n  const gaugeRef = useRef(null);\n  const [gaugeCircleDiameter, setGaugeCircleDiameter] = useState(0);\n  const [gaugeCircleRadius, setGaugeCircleRadius] = useState(0);\n\n  const setGaugeDimensions = () => {\n    if (!gaugeRef.current || !gaugeRef.current.clientWidth) return;\n    const gaugeWrapperWidth = gaugeRef.current.clientWidth;\n    setGaugeCircleDiameter(gaugeWrapperWidth - 40);\n    setGaugeCircleRadius(gaugeCircleDiameter / 2);\n  };\n\n  useEffect(() => {\n    setGaugeDimensions();\n  }, [gaugeRef.current, width]);\n  return /*#__PURE__*/_jsxDEV(S.ClockWrapper, {\n    children: /*#__PURE__*/_jsxDEV(S.Frame, {\n      children: /*#__PURE__*/_jsxDEV(S.Inside, {\n        children: [/*#__PURE__*/_jsxDEV(S.Content, {\n          children: [/*#__PURE__*/_jsxDEV(S.Time, {\n            fontSizeInPixels: Math.round(gaugeCircleDiameter / 3.33),\n            children: `${remainingMinutes}:${remainingSeconds}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(S.Button, {\n            fontSizeInPixels: Math.round(gaugeCircleDiameter / 12),\n            marginTop: Math.round(gaugeCircleDiameter * 0.03),\n            onClick: handleClick,\n            children: isTimeRunning ? 'Pause' : 'Start'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(S.Gauge, {\n          circleDiameter: gaugeCircleDiameter,\n          percentualPassed: gaugePercentual,\n          ref: gaugeRef,\n          children: gaugeCircleRadius > 0 && /*#__PURE__*/_jsxDEV(\"svg\", {\n            version: \"1.1\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            children: /*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: \"50%\",\n              cy: \"50%\",\n              r: gaugeCircleRadius\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Clock, \"fmD9wtBA8UfvN+9OcOGOb8v3i9o=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = Clock;\nClock.propTypes = {\n  setPomodoroCycleType: func\n};\nexport default Clock;\n\nvar _c;\n\n$RefreshReg$(_c, \"Clock\");","map":{"version":3,"sources":["/home/matheus/√Årea de Trabalho/PomodOrc2021-2/src/components/Clock/Clock.tsx"],"names":["React","useContext","useEffect","useRef","useState","func","useWindowSize","cyclesContext","formatRemainingTimeInMinutes","formatRemainingTimeInSeconds","S","Clock","setPomodoroCycleType","width","orderedCycles","remainingTime","setRemainingTime","duration","remainingMinutes","setRemainingMinutes","remainingSeconds","setRemainingSeconds","isTimeRunning","setIsTimeRunning","pomodoroCycles","setPomodoroCycles","gaugePercentual","setGaugePercentual","stopClock","playClock","restartClock","updateCycleInformation","pomodoroCycle","type","handleClick","interval","setInterval","prev","clearInterval","hasCycleEnded","previousState","isFirstCycle","shouldRestart","gaugeRef","gaugeCircleDiameter","setGaugeCircleDiameter","gaugeCircleRadius","setGaugeCircleRadius","setGaugeDimensions","current","clientWidth","gaugeWrapperWidth","Math","round","propTypes"],"mappings":"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","sourcesContent":["import React, {\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n  Dispatch,\n  SetStateAction } from 'react';\nimport { func } from 'prop-types';\n\nimport useWindowSize from 'hooks/useWindowSize';\nimport cyclesContext from 'contexts/cycles.context';\nimport { \n  formatRemainingTimeInMinutes,\n  formatRemainingTimeInSeconds } from 'utils/helpers';\nimport * as S from './Clock.style';\n\ntype ClockProps = {\n  setPomodoroCycleType: Dispatch<SetStateAction<number>>,\n}\nfunction Clock({ setPomodoroCycleType }: ClockProps): JSX.Element {\n  const { width } = useWindowSize();\n  const orderedCycles = useContext(cyclesContext);\n\n  const [remainingTime, setRemainingTime] = useState(orderedCycles[0].duration);\n  const [remainingMinutes, setRemainingMinutes] = useState<number | string>(0);\n  const [remainingSeconds, setRemainingSeconds] = useState<number | string>(0);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  const [pomodoroCycles, setPomodoroCycles] = useState(0);\n  const [gaugePercentual, setGaugePercentual] = useState(0);\n\n  const stopClock = () => setIsTimeRunning(false);\n  const playClock = () => setIsTimeRunning(true);\n  const restartClock = () => {\n    updateCycleInformation(0);\n    stopClock();\n    setPomodoroCycles(0);\n  };\n  const updateCycleInformation = (pomodoroCycle: number) => {\n    setRemainingTime(orderedCycles[pomodoroCycle].duration);\n    setPomodoroCycleType(orderedCycles[pomodoroCycle].type);\n  };\n\n  const handleClick = () => {\n    setIsTimeRunning(!isTimeRunning);\n  }\n\n  React.useEffect(() => {\n    if (isTimeRunning) {\n      const interval = setInterval(() => {\n        setRemainingTime((prev) => {\n          if (prev === 0) return prev;\n          return prev - 1;\n        });\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [isTimeRunning]);\n\n  useEffect(() => {\n    setRemainingMinutes(formatRemainingTimeInMinutes(remainingTime));\n    setRemainingSeconds(formatRemainingTimeInSeconds(remainingTime));\n    setGaugePercentual( (100 - (remainingTime * 100 / orderedCycles[pomodoroCycles].duration)) / 100 );\n\n    const hasCycleEnded = remainingTime === 0;\n    if (hasCycleEnded) {\n      stopClock();\n      setPomodoroCycles(previousState => previousState + 1);\n    }\n  }, [remainingTime]);\n\n  useEffect(() => {\n    const isFirstCycle = pomodoroCycles < 1;\n    const shouldRestart = pomodoroCycles > 5;\n\n    if (!isFirstCycle) {\n      if (shouldRestart) {\n        restartClock();\n        return;\n      }\n      updateCycleInformation(pomodoroCycles);\n      playClock();\n    }\n  }, [pomodoroCycles]);\n\n  const gaugeRef = useRef<HTMLDivElement>(null);\n  const [gaugeCircleDiameter, setGaugeCircleDiameter] = useState<number>(0);\n  const [gaugeCircleRadius, setGaugeCircleRadius] = useState<number>(0);\n\n  const setGaugeDimensions = () => {\n    if (!gaugeRef.current || !gaugeRef.current.clientWidth) return;\n    const gaugeWrapperWidth = gaugeRef.current.clientWidth;\n    setGaugeCircleDiameter(gaugeWrapperWidth - 40);\n    setGaugeCircleRadius(gaugeCircleDiameter / 2);\n  };\n\n  useEffect(() => {\n    setGaugeDimensions();\n  }, [gaugeRef.current, width]);\n\n  return (\n    <S.ClockWrapper>\n      <S.Frame>\n        <S.Inside>\n          <S.Content>\n            <S.Time\n              fontSizeInPixels={Math.round(gaugeCircleDiameter / 3.33)}\n            >\n              {`${remainingMinutes}:${remainingSeconds}`}\n            </S.Time>\n            <S.Button\n              fontSizeInPixels={Math.round(gaugeCircleDiameter / 12)}\n              marginTop={Math.round(gaugeCircleDiameter * 0.03)}\n              onClick={handleClick}\n            >\n              { isTimeRunning ? 'Pause' : 'Start' }\n            </S.Button>\n          </S.Content>\n          <S.Gauge\n            circleDiameter={gaugeCircleDiameter}\n            percentualPassed={gaugePercentual}  \n            ref={gaugeRef}\n          >\n            { gaugeCircleRadius > 0 && (\n              <svg\n                version=\"1.1\"\n                xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"50%\" cy=\"50%\" r={gaugeCircleRadius}/>\n              </svg>\n            )}\n          </S.Gauge>\n        </S.Inside>\n      </S.Frame>\n    </S.ClockWrapper>\n  );\n}\n\nClock.propTypes = {\n  setPomodoroCycleType: func,\n}\n\nexport default Clock;\n"]},"metadata":{},"sourceType":"module"}